{"ast":null,"code":"import _objectSpread from \"C:/Users/Mega Store/Downloads/Shahen-website-main/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Mega Store/Downloads/Shahen-website-main/front-end/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"children\"],\n  _excluded2 = [\"children\"];\n// packages/react/slot/src/Slot.tsx\nimport * as React from \"react\";\nimport { composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nvar Slot = React.forwardRef((props, forwardedRef) => {\n  const {\n      children\n    } = props,\n    slotProps = _objectWithoutProperties(props, _excluded);\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n  if (slottable) {\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map(child => {\n      if (child === slottable) {\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement) ? newElement.props.children : null;\n      } else {\n        return child;\n      }\n    });\n    return /* @__PURE__ */jsx(SlotClone, _objectSpread(_objectSpread({}, slotProps), {}, {\n      ref: forwardedRef,\n      children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null\n    }));\n  }\n  return /* @__PURE__ */jsx(SlotClone, _objectSpread(_objectSpread({}, slotProps), {}, {\n    ref: forwardedRef,\n    children\n  }));\n});\nSlot.displayName = \"Slot\";\nvar SlotClone = React.forwardRef((props, forwardedRef) => {\n  const {\n      children\n    } = props,\n    slotProps = _objectWithoutProperties(props, _excluded2);\n  if (React.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    return React.cloneElement(children, _objectSpread(_objectSpread({}, mergeProps(slotProps, children.props)), {}, {\n      // @ts-ignore\n      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef\n    }));\n  }\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nvar Slottable = _ref => {\n  let {\n    children\n  } = _ref;\n  return /* @__PURE__ */jsx(Fragment, {\n    children\n  });\n};\nfunction isSlottable(child) {\n  return React.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = _objectSpread({}, childProps);\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = function () {\n          childPropValue(...arguments);\n          slotPropValue(...arguments);\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = _objectSpread(_objectSpread({}, slotPropValue), childPropValue);\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return _objectSpread(_objectSpread({}, slotProps), overrideProps);\n}\nfunction getElementRef(element) {\n  var _Object$getOwnPropert, _Object$getOwnPropert2;\n  let getter = (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(element.props, \"ref\")) === null || _Object$getOwnPropert === void 0 ? void 0 : _Object$getOwnPropert.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = (_Object$getOwnPropert2 = Object.getOwnPropertyDescriptor(element, \"ref\")) === null || _Object$getOwnPropert2 === void 0 ? void 0 : _Object$getOwnPropert2.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nvar Root = Slot;\nexport { Root, Slot, Slottable };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}