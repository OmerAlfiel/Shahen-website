{"ast":null,"code":"import _objectSpread from \"C:/Users/Mega Store/Downloads/Shahen-website-main/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Mega Store/Downloads/Shahen-website-main/front-end/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"children\"],\n  _excluded2 = [\"children\"];\n// src/slot.tsx\nimport * as React from \"react\";\nimport { composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\n// @__NO_SIDE_EFFECTS__\nfunction createSlot(ownerName) {\n  const SlotClone = /* @__PURE__ */createSlotClone(ownerName);\n  const Slot2 = React.forwardRef((props, forwardedRef) => {\n    const {\n        children\n      } = props,\n      slotProps = _objectWithoutProperties(props, _excluded);\n    const childrenArray = React.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n      const newElement = slottable.props.children;\n      const newChildren = childrenArray.map(child => {\n        if (child === slottable) {\n          if (React.Children.count(newElement) > 1) return React.Children.only(null);\n          return React.isValidElement(newElement) ? newElement.props.children : null;\n        } else {\n          return child;\n        }\n      });\n      return /* @__PURE__ */jsx(SlotClone, _objectSpread(_objectSpread({}, slotProps), {}, {\n        ref: forwardedRef,\n        children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null\n      }));\n    }\n    return /* @__PURE__ */jsx(SlotClone, _objectSpread(_objectSpread({}, slotProps), {}, {\n      ref: forwardedRef,\n      children\n    }));\n  });\n  Slot2.displayName = \"\".concat(ownerName, \".Slot\");\n  return Slot2;\n}\nvar Slot = /* @__PURE__ */createSlot(\"Slot\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlotClone(ownerName) {\n  const SlotClone = React.forwardRef((props, forwardedRef) => {\n    const {\n        children\n      } = props,\n      slotProps = _objectWithoutProperties(props, _excluded2);\n    if (React.isValidElement(children)) {\n      const childrenRef = getElementRef(children);\n      const props2 = mergeProps(slotProps, children.props);\n      if (children.type !== React.Fragment) {\n        props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n      }\n      return React.cloneElement(children, props2);\n    }\n    return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n  });\n  SlotClone.displayName = \"\".concat(ownerName, \".SlotClone\");\n  return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlottable(ownerName) {\n  const Slottable2 = _ref => {\n    let {\n      children\n    } = _ref;\n    return /* @__PURE__ */jsx(Fragment2, {\n      children\n    });\n  };\n  Slottable2.displayName = \"\".concat(ownerName, \".Slottable\");\n  Slottable2.__radixId = SLOTTABLE_IDENTIFIER;\n  return Slottable2;\n}\nvar Slottable = /* @__PURE__ */createSlottable(\"Slottable\");\nfunction isSlottable(child) {\n  return React.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = _objectSpread({}, childProps);\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = function () {\n          const result = childPropValue(...arguments);\n          slotPropValue(...arguments);\n          return result;\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = _objectSpread(_objectSpread({}, slotPropValue), childPropValue);\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return _objectSpread(_objectSpread({}, slotProps), overrideProps);\n}\nfunction getElementRef(element) {\n  var _Object$getOwnPropert, _Object$getOwnPropert2;\n  let getter = (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(element.props, \"ref\")) === null || _Object$getOwnPropert === void 0 ? void 0 : _Object$getOwnPropert.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = (_Object$getOwnPropert2 = Object.getOwnPropertyDescriptor(element, \"ref\")) === null || _Object$getOwnPropert2 === void 0 ? void 0 : _Object$getOwnPropert2.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nexport { Slot as Root, Slot, Slottable, createSlot, createSlottable };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}